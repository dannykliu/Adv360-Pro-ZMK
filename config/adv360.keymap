
/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */


/* THIS FILE WAS GENERATED!
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/ {
  behaviors {
    #include "macros.dtsi"

    hm: homerow_mods {
        compatible = "zmk,behavior-hold-tap";
        label = "HOMEROW_MODS";
        #binding-cells = <2>;
        tapping-term-ms = <200>;
        quick_tap_ms = <175>;
        flavor = "tap-preferred";
        bindings = <&kp>, <&kp>;
    };
  };

    keymap {
        compatible = "zmk,keymap";


        default_layer {
            bindings = <
   &kp ESC        &kp N1  &kp N2            &kp N3               &kp N4               &kp N5                &kp LG(LS(NUMBER_4))      &kp RG(RS(NUMBER_4))             &kp N6         &kp N7     &kp N8          &kp N9            &kp N0     &kp ESC
 &kp LG(Z)         &kp Q   &kp W             &kp F                &kp P                &kp B            &kp LG(LC(LS(NUMBER_4)))  &kp RG(RC(RS(NUMBER_4)))              &kp J          &kp L      &kp U           &kp Y         &kp COLON   &kp RG(Z)
 &kp ENTER         &kp A   &kp R             &kp S  &kp LA(RIGHT_ARROW)  &kp RG(RIGHT_ARROW)                          &caps_word                 &kp LCTRL       &kp LEFT_ALT                             &kp RIGHT_ALT         &kp RCTRL  &caps_word  &kp RG(LEFT_ARROW)  &kp RA(LEFT_ARROW)    &kp E      &kp I             &kp O  &kp ENTER
 &kp LSHFT         &kp Z   &kp X             &kp C                &kp D                &kp V                               &none                     &none          &kp LG(C)          &none      &none       &kp RG(V)             &none       &none               &kp K               &kp H  &kp DOT  &kp COMMA  &kp SINGLE_QUOTE  &kp RSHFT
 &kp LG(S)  &kp C_VOL_DN  &tog 3  &lt 2 LEFT_ARROW    &lt 1 RIGHT_ARROW            &kp SPACE                       &kp BACKSPACE          &kp LEFT_COMMAND  &kp RIGHT_COMMAND  &kp BACKSPACE  &kp SPACE  &lt 1 UP_ARROW  &lt 2 DOWN_ARROW      &tog 3        &kp C_VOL_UP           &kp RG(S)
            >;
        };

        layer_symbols {
            bindings = <
        &trans       &kp EXCL        &kp PRCNT  &kp KP_MULTIPLY             &kp FSLH        &kp SEMICOLON                    &none  &trans  &kp SEMICOLON     &kp FSLH  &kp KP_MULTIPLY    &kp PERCENT  &kp EXCLAMATION         &trans
        &trans  &macro_braces        &kp SLASH         &kp PLUS            &kp LG(F)             &kp HASH                    &none  &trans      &kp POUND    &kp RG(F)         &kp PLUS      &kp SLASH    &macro_braces         &trans
        &trans      &kp UNDER  &macro_brackets    &macro_parens  &kp LA(RIGHT_ARROW)  &kp LG(RIGHT_ARROW)            &kp LG(SLASH)  &trans         &trans                                       &trans           &trans  &kp RG(SLASH)  &kp RG(LEFT_ARROW)  &kp RA(LEFT_ARROW)  &macro_parens  &macro_brackets    &kp UNDERSCORE   &none
        &trans  &kp LESS_THAN        &kp EQUAL        &kp MINUS            &kp LG(D)          &kp LA(DEL)                   &trans  &trans         &trans       &trans           &trans         &trans           &trans         &trans         &kp RA(DEL)           &kp RG(D)      &kp MINUS        &kp EQUAL  &kp GREATER_THAN   &none
 &kp LG(MINUS)         &trans        &kp CARET          &kp DEL        &kp LS(ENTER)              &kp TAB              &kp LS(TAB)  &trans         &trans  &kp RS(TAB)          &kp TAB  &kp RS(ENTER)          &kp DEL      &kp CARET              &trans        &kp RG(PLUS)
            >;
        };

        layer_words {
            bindings = <
 &trans        &trans         &trans        &trans               &trans           &trans            &trans  &trans        &kp TILDE  &kp AMPERSAND   &kp AT_SIGN     &kp DOLLAR  &kp QUESTION  &trans
 &trans  &macro_start  &macro_vector  &macro_layer         &macro_patch  &macro_manifold            &trans  &trans  &macro_manifold   &macro_patch  &macro_layer  &macro_vector  &macro_start  &trans
 &trans    &macro_len    &macro_self  &macro_curve         &macro_print    &macro_return            &trans  &trans           &trans                                      &trans        &trans  &trans  &macro_return         &macro_print  &macro_curve  &macro_self  &macro_len  &trans
 &trans     &macro_-1       &macro_0      &macro_i  &macro_triple_quote           &trans            &trans  &trans           &trans         &trans        &trans         &trans        &trans  &trans         &trans  &macro_triple_quote      &macro_i     &macro_0   &macro_-1  &trans
 &trans        &trans         &trans        &trans               &trans           &trans            &trans  &trans           &trans         &trans        &trans         &trans        &trans  &trans         &trans               &trans
            >;
        };

        layer_numbers {
            bindings = <
   &kp ESC      &none         &none         &none         &none            &none             &none   &none            &none         &none         &none         &none      &none  &kp ESC
     &none  &kp SLASH  &kp NUMBER_9  &kp NUMBER_8  &kp NUMBER_7  &kp KP_MULTIPLY             &none   &none  &kp KP_MULTIPLY  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp SLASH    &none
 &kp ENTER  &kp MINUS  &kp NUMBER_6  &kp NUMBER_5  &kp NUMBER_4         &kp PLUS             &none   &none            &none                                     &none      &none    &none      &kp PLUS  &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp MINUS  &kp ENTER
     &none  &kp CARET  &kp NUMBER_3  &kp NUMBER_2  &kp NUMBER_1     &kp NUMBER_0            &trans  &trans            &none        &trans        &trans         &none     &trans   &trans  &kp NUMBER_0  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp CARET      &none
     &none      &none         &none         &none         &none            &to 1             &none   &none            &none         &none         &to 1         &none      &none    &none         &none         &none
            >;
        };

    };
};
