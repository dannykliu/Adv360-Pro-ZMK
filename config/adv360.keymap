
/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */


/* THIS FILE WAS GENERATED!
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/backlight.h>

/ {
  behaviors {
    #include "macros.dtsi"

    htl: hold_tap_layer {
         compatible = "zmk,behavior-hold-tap";
         label = "HOLD_TAP_LAYER";
         #binding-cells = <2>;
         tapping-term-ms = <150>;
         quick_tap_ms = <150>;
         flavor = "tap-preferred";
         bindings = <&mo>, <&kp>;
    };
    
    ht: hold_tap {
        compatible = "zmk,behavior-hold-tap";
        label = "HOLD_TAP";
        #binding-cells = <2>;
        tapping-term-ms = <150>;
        quick_tap_ms = <150>;
        flavor = "tap-preferred";
        bindings = <&kp>, <&kp>;
    };
  };

    keymap {
        compatible = "zmk,keymap";


        default_layer {
            bindings = <
                  &kp ESC                     &kp N9         &kp N7          &kp N1  &kp N3       &kp N5           &kp C_VOLUME_DOWN                                       &kp C_VOLUME_UP                     &kp N4    &kp N2       &kp N0       &kp N6         &kp N8             &kp ESC
                  &ht RPAR LPAR               &kp Q          &kp W           &kp F   &kp P        &kp B            &kp LG(LC(LS(NUMBER_4)))                                &kp RG(RC(RS(NUMBER_4)))            &kp J     &kp L        &kp U        &kp Y          &kp COLON          &ht RPAR LPAR
                  &ht UNDER ENTER             &kp A          &kp R           &kp S   &kp T        &kp G            &kp LEFT_ALT   &kp LG(C) &kp LG(V) &kp RG(V) &kp RG(C)  &kp RIGHT_ALT                       &kp M     &kp N        &kp E        &kp I          &kp O              &ht UNDER ENTER
                  &htl 2 MINUS                &kp Z          &kp X           &kp C   &kp D        &kp V                &none  &none  &kp LCTRL  &none &none  &kp RCTRL &none &none                             &kp K     &kp H        &kp DOT      &kp COMMA      &kp SINGLE_QUOTE   &htl 2 MINUS
                  &kp LG(S)                   &kp LG(SLASH)  &kp LS(ENTER)   &kp DEL &sl 1                  &kp SPACE   &kp BACKSPACE  &kp LEFT_COMMAND  &kp RIGHT_COMMAND  &kp BACKSPACE  &kp SPACE                     &sl 1        &kp DEL      &kp RS(ENTER)  &kp RG(SLASH)      &kp LG(S)
            >;
        };

        layer_symbols {
            bindings = <
                  &trans           &kp EXCL         &kp PRCNT        &kp HASH         &kp BACKSLASH         &kp SEMICOLON                        &kp PIPE              &kp PIPE                   &kp SEMICOLON       &kp BACKSLASH       &kp HASH          &kp PERCENT      &kp EXCLAMATION  &trans
                  &macro_parens    &kp EQUAL        &kp PLUS         &kp UP_ARROW     &kp LG(RIGHT_ARROW)   &macro_end_enter            &kp LG(LS(NUMBER_4))  &kp RG(RS(NUMBER_4))                &macro_end_enter    &kp RG(LEFT_ARROW)  &kp UP_ARROW      &kp PLUS         &kp EQUAL        &macro_parens
                  &ht RBKT LBKT    &kp UNDER        &kp RIGHT_ARROW  &kp DOWN_ARROW   &kp LEFT_ARROW        &kp LA(RIGHT_ARROW)         &none  &kp LG(F)   &trans  &trans  &kp RG(F)  &none       &kp RA(LEFT_ARROW)  &kp LEFT_ARROW      &kp DOWN_ARROW    &kp RIGHT_ARROW  &kp UNDERSCORE   &ht RBKT LBKT
                  &ht RBRC LBRC    &kp KP_MULTIPLY  &kp MINUS        &kp SLASH        &kp LG(D)             &kp LA(DEL)            &trans  &trans  &trans  &trans  &trans &trans &trans &trans    &kp RA(BACKSPACE)   &kp RG(D)           &kp SLASH         &kp MINUS        &kp KP_MULTIPLY  &ht RBRC LBRC
                  &kp LG(S)        &none            &kp LS(LG(Z))    &kp LG(Z)        &kp LG(F)                                       &kp TAB  &kp LS(TAB)  &trans   &trans &kp RS(TAB)  &kp TAB  &kp LG(F)           &kp RG(Z)           &kp RS(RG(Z))                      &none            &kp LG(S)
            >;
        };

        layer_numbers {
            bindings = <
                  &kp ESC           &kp QUESTION    &kp DOLLAR           &kp AT            &kp AMPS            &kp TILDE                              &none   &none                              &kp TILDE            &kp AMPS          &kp AT_SIGN       &kp DOLLAR           &kp QUESTION    &kp ESC
                  &macro_0          &kp LS(Q)       &kp LS(W)            &kp LS(F)         &kp LS(P)           &kp LS(B)                             &none   &none                               &kp RS(J)            &kp RS(L)         &kp RS(U)         &kp RS(Y)            &kp SEMICOLON   &macro_0
                  &macro_1          &kp LS(A)       &kp LS(R)            &kp LS(S)         &kp LS(T)           &kp LS(G)      &none &none  &none  &none  &none &none                             &kp RS(M)            &kp RS(N)         &kp RS(E)         &kp RS(I)            &kp RS(O)       &macro_1
                  &macro_i          &kp LS(Z)       &kp LS(X)            &kp LS(C)         &kp LS(D)           &kp LS(V)            &trans  &trans  &none  &trans  &trans &none  &trans &trans   &kp RS(K)            &kp RS(H)         &kp CARET         &kp PIPE             &kp DQT         &macro_i
                  &none             &none           &macro_triple_quote  &kp GREATER_THAN  &kp LESS_THAN                               &trans  &trans  &none &none  &trans   &trans                                   &kp LESS_THAN     &kp GREATER_THAN  &macro_triple_quote  &none           &none
            >;
        };

    };
};
